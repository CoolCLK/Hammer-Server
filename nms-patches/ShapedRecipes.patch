--- a/net/minecraft/server/ShapedRecipes.java
+++ b/net/minecraft/server/ShapedRecipes.java
@@ -1,19 +1,29 @@
 package net.minecraft.server;
 
 import com.google.common.annotations.VisibleForTesting;
+import com.google.common.collect.HashMultimap;
 import com.google.common.collect.Maps;
+import com.google.common.collect.Multimap;
 import com.google.common.collect.Sets;
 import com.google.gson.JsonArray;
 import com.google.gson.JsonElement;
 import com.google.gson.JsonObject;
 import com.google.gson.JsonParseException;
 import com.google.gson.JsonSyntaxException;
+
+import java.util.Arrays;
 import java.util.HashMap;
 import java.util.HashSet;
 import java.util.Iterator;
 import java.util.Map;
 import java.util.Map.Entry;
 import javax.annotation.Nullable;
+// CraftBukkit start
+import joptsimple.internal.Strings;
+import org.bukkit.Bukkit;
+import org.bukkit.craftbukkit.inventory.CraftItemStack;
+import org.bukkit.craftbukkit.inventory.CraftShapedRecipe;
+// CraftBukkit end
 
 public class ShapedRecipes implements IRecipe {
 
@@ -21,7 +31,35 @@
     private final int height;
     private final NonNullList<RecipeItemStack> items;
     private final ItemStack result;
-    private final String e;
+    private final String e; // PAIL group
+    // CraftBukkit start
+    public String[] shape = new String[0];
+    public boolean hidden = false;
+    private boolean exactMatch = false;
+    public MinecraftKey key;
+
+    @Override
+    public void setKey(MinecraftKey key) {
+        this.key = key;
+    }
+
+    @Override
+    public String getGroup() {
+        return this.e;
+    }
+
+    @Override
+    public boolean c() {
+        return this.hidden;
+    }
+
+    public void setExactMatch(boolean exactMatch) {
+        this.exactMatch = exactMatch;
+        for(RecipeItemStack stack : this.items) {
+            stack.exactMatch = this.exactMatch;
+        }
+    }
+    // CraftBukkit end
 
     public ShapedRecipes(String s, int i, int j, NonNullList<RecipeItemStack> nonnulllist, ItemStack itemstack) {
         this.e = s;
@@ -31,6 +69,34 @@
         this.result = itemstack;
     }
 
+    // CraftBukkit start
+    public ShapedRecipes(String s, int i, int j, NonNullList<RecipeItemStack> nonnulllist, ItemStack itemstack, String[] shape) {
+        this(s,i,j,nonnulllist,itemstack);
+        this.shape = shape == null ? new String[0] : shape;
+    }
+
+    public org.bukkit.inventory.ShapedRecipe toBukkitRecipe() {
+        CraftItemStack craftStack = CraftItemStack.asCraftMirror(this.result);
+        CraftShapedRecipe bukkitRecipe = new CraftShapedRecipe(craftStack, this);
+        bukkitRecipe.group(e);
+        bukkitRecipe.hidden(this.c()); // PAIL isHidden
+        bukkitRecipe.setExactMatch(this.exactMatch);
+        if(this.shape != null && (shape.length > 0 && shape.length < 4) ) {
+            bukkitRecipe.shape(this.shape);
+            int slot = 0;
+            String str = Strings.join(this.shape, "");
+            for(RecipeItemStack list : this.items) {
+                for(int i = 0; i < list.choices.length; i++) {
+                    ItemStack choice = list.choices[i];
+                    bukkitRecipe.setIngredient(str.charAt(slot), CraftItemStack.asBukkitCopy(choice));
+                }
+                slot++;
+            }
+        }
+        return bukkitRecipe;
+    }
+    // CraftBukkit end
+
     public ItemStack b() {
         return this.result;
     }
@@ -113,8 +179,7 @@
         int j = astring.length;
         NonNullList nonnulllist = a(astring, map, i, j);
         ItemStack itemstack = a(ChatDeserializer.t(jsonobject, "result"), true);
-
-        return new ShapedRecipes(s, i, j, nonnulllist, itemstack);
+        return new ShapedRecipes(s,i,j,nonnulllist,itemstack,astring); // CraftBukkit - use added constructor
     }
 
     private static NonNullList<RecipeItemStack> a(String[] astring, Map<String, RecipeItemStack> map, int i, int j) {
