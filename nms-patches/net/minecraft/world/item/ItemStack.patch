--- a/net/minecraft/world/item/ItemStack.java
+++ b/net/minecraft/world/item/ItemStack.java
@@ -76,6 +76,43 @@
 import net.minecraft.world.level.block.state.pattern.ShapeDetectorBlock;
 import org.slf4j.Logger;
 
+// CraftBukkit start
+import com.mojang.serialization.Dynamic;
+import java.util.Map;
+import java.util.Objects;
+import net.minecraft.core.EnumDirection;
+import net.minecraft.nbt.DynamicOpsNBT;
+import net.minecraft.network.protocol.game.PacketPlayOutBlockChange;
+import net.minecraft.server.MinecraftServer;
+import net.minecraft.server.level.WorldServer;
+import net.minecraft.sounds.SoundCategory;
+import net.minecraft.util.datafix.fixes.DataConverterTypes;
+import net.minecraft.world.level.block.BlockBed;
+import net.minecraft.world.level.block.Blocks;
+import net.minecraft.world.level.block.BlockSapling;
+import net.minecraft.world.level.block.BlockSign;
+import net.minecraft.world.level.block.BlockTileEntity;
+import net.minecraft.world.level.block.BlockWitherSkull;
+import net.minecraft.world.level.block.SoundEffectType;
+import net.minecraft.world.level.block.entity.TileEntity;
+import net.minecraft.world.level.block.entity.TileEntityJukeBox;
+import net.minecraft.world.level.block.entity.TileEntitySign;
+import net.minecraft.world.level.block.entity.TileEntitySkull;
+import net.minecraft.world.level.gameevent.GameEvent;
+import org.bukkit.Location;
+import org.bukkit.TreeType;
+import org.bukkit.block.BlockState;
+import org.bukkit.craftbukkit.block.CraftBlock;
+import org.bukkit.craftbukkit.block.CraftBlockState;
+import org.bukkit.craftbukkit.inventory.CraftItemStack;
+import org.bukkit.craftbukkit.util.CraftLocation;
+import org.bukkit.craftbukkit.util.CraftMagicNumbers;
+import org.bukkit.entity.Player;
+import org.bukkit.event.block.BlockFertilizeEvent;
+import org.bukkit.event.player.PlayerItemDamageEvent;
+import org.bukkit.event.world.StructureGrowEvent;
+// CraftBukkit end
+
 public final class ItemStack {
 
     public static final Codec<ItemStack> CODEC = RecordCodecBuilder.create((instance) -> {
@@ -151,11 +188,24 @@
         this.item = null;
     }
 
-    private ItemStack(NBTTagCompound nbttagcompound) {
+    // Called to run this stack through the data converter to handle older storage methods and serialized items
+    public void convertStack(int version) {
+        if (0 < version && version < CraftMagicNumbers.INSTANCE.getDataVersion()) {
+            NBTTagCompound savedStack = new NBTTagCompound();
+            this.save(savedStack);
+            savedStack = (NBTTagCompound) MinecraftServer.getServer().fixerUpper.update(DataConverterTypes.ITEM_STACK, new Dynamic(DynamicOpsNBT.INSTANCE, savedStack), version, CraftMagicNumbers.INSTANCE.getDataVersion()).getValue();
+            this.load(savedStack);
+        }
+    }
+
+    // CraftBukkit - break into own method
+    private void load(NBTTagCompound nbttagcompound) {
         this.item = (Item) BuiltInRegistries.ITEM.get(new MinecraftKey(nbttagcompound.getString("id")));
         this.count = nbttagcompound.getByte("Count");
         if (nbttagcompound.contains("tag", 10)) {
-            this.tag = nbttagcompound.getCompound("tag");
+            // CraftBukkit start - make defensive copy as this data may be coming from the save thread
+            this.tag = nbttagcompound.getCompound("tag").copy();
+            // CraftBukkit end
             this.getItem().verifyTagAfterLoad(this.tag);
         }
 
@@ -165,6 +215,11 @@
 
     }
 
+    private ItemStack(NBTTagCompound nbttagcompound) {
+        this.load(nbttagcompound);
+        // CraftBukkit end
+    }
+
     public static ItemStack of(NBTTagCompound nbttagcompound) {
         try {
             return new ItemStack(nbttagcompound);
@@ -323,6 +378,21 @@
                 }
 
                 i -= k;
+                // CraftBukkit start
+                if (entityplayer != null) {
+                    PlayerItemDamageEvent event = new PlayerItemDamageEvent(entityplayer.getBukkitEntity(), CraftItemStack.asCraftMirror(this), i);
+                    event.getPlayer().getServer().getPluginManager().callEvent(event);
+
+                    if (i != event.getDamage() || event.isCancelled()) {
+                        event.getPlayer().updateInventory();
+                    }
+                    if (event.isCancelled()) {
+                        return false;
+                    }
+
+                    i = event.getDamage();
+                }
+                // CraftBukkit end
                 if (i <= 0) {
                     return false;
                 }
@@ -344,6 +414,11 @@
                 if (this.hurt(i, t0.getRandom(), t0 instanceof EntityPlayer ? (EntityPlayer) t0 : null)) {
                     consumer.accept(t0);
                     Item item = this.getItem();
+                    // CraftBukkit start - Check for item breaking
+                    if (this.count == 1 && t0 instanceof EntityHuman) {
+                        org.bukkit.craftbukkit.event.CraftEventFactory.callPlayerItemBreakEvent((EntityHuman) t0, this);
+                    }
+                    // CraftBukkit end
 
                     this.shrink(1);
                     if (t0 instanceof EntityHuman) {
@@ -492,6 +567,17 @@
         return this.tag;
     }
 
+    // CraftBukkit start
+    @Nullable
+    private NBTTagCompound getTagClone() {
+        return this.tag == null ? null : this.tag.copy();
+    }
+
+    private void setTagClone(@Nullable NBTTagCompound nbtttagcompound) {
+        this.setTag(nbtttagcompound == null ? null : nbtttagcompound.copy());
+    }
+    // CraftBukkit end
+
     public NBTTagCompound getOrCreateTag() {
         if (this.tag == null) {
             this.setTag(new NBTTagCompound());
@@ -862,6 +948,12 @@
     }
 
     public void setRepairCost(int i) {
+        // CraftBukkit start - remove RepairCost tag when 0 (SPIGOT-3945)
+        if (i == 0) {
+            this.removeTagKey("RepairCost");
+            return;
+        }
+        // CraftBukkit end
         this.getOrCreateTag().putInt("RepairCost", i);
     }
 
@@ -911,6 +1003,13 @@
         nbttaglist.add(nbttagcompound);
     }
 
+    // CraftBukkit start
+    @Deprecated
+    public void setItem(Item item) {
+        this.item = item;
+    }
+    // CraftBukkit end
+
     public IChatBaseComponent getDisplayName() {
         IChatMutableComponent ichatmutablecomponent = IChatBaseComponent.empty().append(this.getHoverName());
 
