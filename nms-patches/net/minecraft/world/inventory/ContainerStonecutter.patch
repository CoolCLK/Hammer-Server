--- a/net/minecraft/world/inventory/ContainerStonecutter.java
+++ b/net/minecraft/world/inventory/ContainerStonecutter.java
@@ -16,6 +16,15 @@
 import net.minecraft.world.level.World;
 import net.minecraft.world.level.block.Blocks;
 
+// CraftBukkit start
+import org.bukkit.Location;
+import org.bukkit.craftbukkit.inventory.CraftInventoryStonecutter;
+import org.bukkit.craftbukkit.inventory.subcontainer.CraftChangeDetectingSubContainer;
+import org.bukkit.craftbukkit.inventory.view.CraftStonecutterView;
+import org.bukkit.entity.Player;
+import java.util.Objects;
+// CraftBukkit end
+
 public class ContainerStonecutter extends Container {
 
     public static final int INPUT_SLOT = 0;
@@ -35,27 +44,58 @@
     Runnable slotUpdateListener;
     public final IInventory container;
     final InventoryCraftResult resultContainer;
+    // CraftBukkit start
+    private CraftStonecutterView bukkitEntity = null;
+    private Player player;
+
+    @Override
+    public CraftStonecutterView getBukkitView() {
+        if (bukkitEntity != null) {
+            return bukkitEntity;
+        }
+
+        CraftInventoryStonecutter inventory = new CraftInventoryStonecutter(this.container, this.resultContainer);
+        bukkitEntity = new CraftStonecutterView(this.player, inventory, this);
+        return bukkitEntity;
+    }
+    public ContainerStonecutter(int i, PlayerInventory playerinventory, final ContainerAccess containeraccess) {
+        this(i, playerinventory, containeraccess, null, null);
+    }
+    // CraftBukkit end
 
     public ContainerStonecutter(int i, PlayerInventory playerinventory) {
         this(i, playerinventory, ContainerAccess.NULL);
     }
 
-    public ContainerStonecutter(int i, PlayerInventory playerinventory, final ContainerAccess containeraccess) {
+    // CraftBukkit -> add IInventory container parameter
+    public ContainerStonecutter(int i, PlayerInventory playerinventory, final ContainerAccess containeraccess, IInventory container, InventoryCraftResult resultContainer) {
         super(Containers.STONECUTTER, i);
         this.selectedRecipeIndex = ContainerProperty.standalone();
         this.recipes = Lists.newArrayList();
         this.input = ItemStack.EMPTY;
         this.slotUpdateListener = () -> {
         };
-        this.container = new InventorySubcontainer(1) {
+        // Craftbukkit start -> set container to provided if not null
+        this.container = Objects.requireNonNullElseGet(container, () -> new InventorySubcontainer(1) {
             @Override
             public void setChanged() {
                 super.setChanged();
                 ContainerStonecutter.this.slotsChanged(this);
                 ContainerStonecutter.this.slotUpdateListener.run();
             }
-        };
-        this.resultContainer = new InventoryCraftResult();
+
+            // CraftBukkit start
+            @Override
+            public Location getLocation() {
+                return containeraccess.getLocation();
+            }
+            // CraftBukkit end
+        });
+        if (this.container instanceof CraftChangeDetectingSubContainer changer) {
+            changer.setContainer(this::slotsChanged, containeraccess);
+        }
+        this.resultContainer = Objects.requireNonNullElseGet(resultContainer, InventoryCraftResult::new);
+        // CraftBukkit end
         this.access = containeraccess;
         this.level = playerinventory.player.level();
         this.inputSlot = this.addSlot(new Slot(this.container, 0, 20, 33));
@@ -105,6 +145,7 @@
         }
 
         this.addDataSlot(this.selectedRecipeIndex);
+        player = (Player) playerinventory.player.getBukkitEntity(); // CraftBukkit
     }
 
     public int getSelectedRecipeIndex() {
@@ -125,6 +166,7 @@
 
     @Override
     public boolean stillValid(EntityHuman entityhuman) {
+        if (!this.checkReachable) return true; // CraftBukkit
         return stillValid(this.access, entityhuman, Blocks.STONECUTTER);
     }
 
