--- a/net/minecraft/world/inventory/ContainerAnvilAbstract.java
+++ b/net/minecraft/world/inventory/ContainerAnvilAbstract.java
@@ -9,6 +9,9 @@
 import net.minecraft.world.entity.player.PlayerInventory;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.level.block.state.IBlockData;
+// CraftBukkit start
+import org.bukkit.craftbukkit.inventory.subcontainer.CraftMultiInventorySubContainer;
+// CraftBukkit end
 
 public abstract class ContainerAnvilAbstract extends Container {
 
@@ -18,7 +21,7 @@
     protected final EntityHuman player;
     protected final IInventory inputSlots;
     private final List<Integer> inputSlotIndexes;
-    protected final InventoryCraftResult resultSlots = new InventoryCraftResult();
+    protected final InventoryCraftResult resultSlots; // CraftBukkit -> Move declaration to constructor
     private final int resultSlotIndex;
 
     protected abstract boolean mayPickup(EntityHuman entityhuman, boolean flag);
@@ -27,12 +30,31 @@
 
     protected abstract boolean isValidBlock(IBlockData iblockdata);
 
-    public ContainerAnvilAbstract(@Nullable Containers<?> containers, int i, PlayerInventory playerinventory, ContainerAccess containeraccess) {
+    // CraftBukkit start -> add constructor for CraftInventoryBuilder
+    public ContainerAnvilAbstract(@Nullable Containers<?> containers, int i, PlayerInventory playerinventory, ContainerAccess containeraccess, InventorySubcontainer inputSlots, InventoryCraftResult resultSlots) {
         super(containers, i);
         this.access = containeraccess;
         this.player = playerinventory.player;
         ItemCombinerMenuSlotDefinition itemcombinermenuslotdefinition = this.createInputSlotDefinitions();
+        this.resultSlots = new InventoryCraftResult();
+        this.inputSlots = inputSlots;
+        if (this.inputSlots instanceof CraftMultiInventorySubContainer cmisc) {
+            cmisc.addInstance(player, this::slotsChanged);
+        }
+        this.inputSlotIndexes = itemcombinermenuslotdefinition.getInputSlotIndexes();
+        this.resultSlotIndex = itemcombinermenuslotdefinition.getResultSlotIndex();
+        this.createInputSlots(itemcombinermenuslotdefinition);
+        this.createResultSlot(itemcombinermenuslotdefinition);
+        this.createInventorySlots(playerinventory);
+    }
 
+    // CraftBukkit end
+    public ContainerAnvilAbstract(@Nullable Containers<?> containers, int i, PlayerInventory playerinventory, ContainerAccess containeraccess) {
+        super(containers, i);
+        this.access = containeraccess;
+        this.player = playerinventory.player;
+        ItemCombinerMenuSlotDefinition itemcombinermenuslotdefinition = this.createInputSlotDefinitions();
+        this.resultSlots = new InventoryCraftResult(); // CraftBukkit -> Move declaration to constructor
         this.inputSlots = this.createContainer(itemcombinermenuslotdefinition.getNumOfInputSlots());
         this.inputSlotIndexes = itemcombinermenuslotdefinition.getInputSlotIndexes();
         this.resultSlotIndex = itemcombinermenuslotdefinition.getResultSlotIndex();
@@ -124,6 +146,7 @@
 
     @Override
     public boolean stillValid(EntityHuman entityhuman) {
+        if (!this.checkReachable) return true; // CraftBukkit
         return (Boolean) this.access.evaluate((world, blockposition) -> {
             return !this.isValidBlock(world.getBlockState(blockposition)) ? false : entityhuman.distanceToSqr((double) blockposition.getX() + 0.5D, (double) blockposition.getY() + 0.5D, (double) blockposition.getZ() + 0.5D) <= 64.0D;
         }, true);
