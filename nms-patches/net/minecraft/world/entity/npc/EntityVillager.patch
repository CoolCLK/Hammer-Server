--- a/net/minecraft/world/entity/npc/EntityVillager.java
+++ b/net/minecraft/world/entity/npc/EntityVillager.java
@@ -89,6 +89,17 @@
 import net.minecraft.world.phys.AxisAlignedBB;
 import org.apache.logging.log4j.Logger;
 
+// CraftBukkit start
+import com.google.common.collect.Maps;
+import org.bukkit.Bukkit;
+import org.bukkit.craftbukkit.entity.CraftVillager;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.entity.Villager;
+import org.bukkit.event.entity.EntityTransformEvent;
+import org.bukkit.event.entity.EntityVillagerReputationEvent;
+import org.bukkit.event.entity.VillagerReplenishTradeEvent;
+// CraftBukkit end
+
 public class EntityVillager extends EntityVillagerAbstract implements ReputationHandler, VillagerDataHolder {
 
     private static final DataWatcherObject<VillagerData> DATA_VILLAGER_DATA = DataWatcher.defineId(EntityVillager.class, DataWatcherRegistry.VILLAGER_DATA);
@@ -130,6 +141,9 @@
     }, MemoryModuleType.MEETING_POINT, (entityvillager, villageplacetype) -> {
         return villageplacetype == VillagePlaceType.MEETING;
     });
+    // CraftBukkit start
+    public long gossipDecayTime = 24000L;
+    // CraftBukkit end
 
     public EntityVillager(EntityTypes<? extends EntityVillager> entitytypes, World world) {
         this(entitytypes, world, VillagerType.PLAINS);
@@ -146,7 +160,7 @@
 
     @Override
     public BehaviorController<EntityVillager> getBrain() {
-        return super.getBrain();
+        return (BehaviorController<EntityVillager>) super.getBrain(); // CraftBukkit - decompile error
     }
 
     @Override
@@ -229,7 +243,7 @@
                     this.increaseProfessionLevelOnUpdate = false;
                 }
 
-                this.addEffect(new MobEffect(MobEffects.REGENERATION, 200, 0));
+                this.addEffect(new MobEffect(MobEffects.REGENERATION, 200, 0), org.bukkit.event.entity.EntityPotionEffectEvent.Cause.VILLAGER_TRADE); // CraftBukkit
             }
         }
 
@@ -357,7 +371,13 @@
         while (iterator.hasNext()) {
             MerchantRecipe merchantrecipe = (MerchantRecipe) iterator.next();
 
-            merchantrecipe.resetUses();
+            // CraftBukkit start
+            VillagerReplenishTradeEvent event = new VillagerReplenishTradeEvent((Villager) this.getBukkitEntity(), merchantrecipe.asBukkit());
+            Bukkit.getPluginManager().callEvent(event);
+            if (!event.isCancelled()) {
+                merchantrecipe.resetUses();
+            }
+            // CraftBukkit end
         }
 
         this.lastRestockGameTime = this.level.getGameTime();
@@ -415,7 +435,13 @@
             while (iterator.hasNext()) {
                 MerchantRecipe merchantrecipe = (MerchantRecipe) iterator.next();
 
-                merchantrecipe.resetUses();
+                // CraftBukkit start
+                VillagerReplenishTradeEvent event = new VillagerReplenishTradeEvent((Villager) this.getBukkitEntity(), merchantrecipe.asBukkit());
+                Bukkit.getPluginManager().callEvent(event);
+                if (!event.isCancelled()) {
+                    merchantrecipe.resetUses();
+                }
+                // CraftBukkit end
             }
         }
 
@@ -474,7 +500,7 @@
     @Override
     public void addAdditionalSaveData(NBTTagCompound nbttagcompound) {
         super.addAdditionalSaveData(nbttagcompound);
-        DataResult dataresult = VillagerData.CODEC.encodeStart(DynamicOpsNBT.INSTANCE, this.getVillagerData());
+        DataResult<NBTBase> dataresult = VillagerData.CODEC.encodeStart(DynamicOpsNBT.INSTANCE, this.getVillagerData()); // CraftBukkit - decompile error
         Logger logger = EntityVillager.LOGGER;
 
         Objects.requireNonNull(logger);
@@ -816,7 +842,12 @@
             }
 
             entitywitch.setPersistenceRequired();
-            worldserver.addFreshEntityWithPassengers(entitywitch);
+            // CraftBukkit start
+            if (CraftEventFactory.callEntityTransformEvent(this, entitywitch, EntityTransformEvent.TransformReason.LIGHTNING).isCancelled()) {
+                return;
+            }
+            worldserver.addFreshEntityWithPassengers(entitywitch, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.LIGHTNING);
+            // CraftBukkit end
             this.releaseAllPois();
             this.discard();
         } else {
@@ -837,6 +868,13 @@
                 return;
             }
 
+            // CraftBukkit start
+            ItemStack remaining = new InventorySubcontainer(inventorysubcontainer).addItem(itemstack);
+            if (CraftEventFactory.callEntityPickupItemEvent(this, entityitem, remaining.getCount(), false).isCancelled()) {
+                return;
+            }
+            // CraftBukkit end
+
             this.onItemPickup(entityitem);
             this.take(entityitem, itemstack.getCount());
             ItemStack itemstack1 = inventorysubcontainer.addItem(itemstack);
@@ -907,8 +945,8 @@
 
         if (this.lastGossipDecayTime == 0L) {
             this.lastGossipDecayTime = i;
-        } else if (i >= this.lastGossipDecayTime + 24000L) {
-            this.gossips.decay();
+        } else if (i >= this.lastGossipDecayTime + gossipDecayTime) { // CraftBukkit - add gossipDecayTime variable
+            this.gossips.decay(this); // CraftBukkit - add EntityVillager to parameters
             this.lastGossipDecayTime = i;
         }
     }
@@ -949,7 +987,7 @@
 
                 if (entityirongolem != null) {
                     if (entityirongolem.checkSpawnRules(worldserver, EnumMobSpawn.MOB_SUMMONED) && entityirongolem.checkSpawnObstruction(worldserver)) {
-                        worldserver.addFreshEntityWithPassengers(entityirongolem);
+                        worldserver.addFreshEntityWithPassengers(entityirongolem, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.VILLAGE_DEFENSE); // CraftBukkit
                         return entityirongolem;
                     }
 
@@ -983,17 +1021,31 @@
 
     @Override
     public void onReputationEventFrom(ReputationEvent reputationevent, Entity entity) {
+        // CraftBukkit start - add event for Villager Reputation
+        Map<Villager.ReputationType, Integer> reputationTypeAmounts = Maps.newHashMap();
+
         if (reputationevent == ReputationEvent.ZOMBIE_VILLAGER_CURED) {
-            this.gossips.add(entity.getUUID(), ReputationType.MAJOR_POSITIVE, 20);
-            this.gossips.add(entity.getUUID(), ReputationType.MINOR_POSITIVE, 25);
+            reputationTypeAmounts.put(Villager.ReputationType.MAJOR_POSITIVE, 20);
+            reputationTypeAmounts.put(Villager.ReputationType.MINOR_POSITIVE, 25);
         } else if (reputationevent == ReputationEvent.TRADE) {
-            this.gossips.add(entity.getUUID(), ReputationType.TRADING, 2);
+            reputationTypeAmounts.put(Villager.ReputationType.TRADING, 2);
         } else if (reputationevent == ReputationEvent.VILLAGER_HURT) {
-            this.gossips.add(entity.getUUID(), ReputationType.MINOR_NEGATIVE, 25);
+            reputationTypeAmounts.put(Villager.ReputationType.MINOR_NEGATIVE, 25);
         } else if (reputationevent == ReputationEvent.VILLAGER_KILLED) {
-            this.gossips.add(entity.getUUID(), ReputationType.MAJOR_NEGATIVE, 25);
+            reputationTypeAmounts.put(Villager.ReputationType.MAJOR_NEGATIVE, 25);
         }
 
+        EntityVillagerReputationEvent event = CraftEventFactory.callEntityVillagerReputationEvent(entity, this, reputationevent, reputationTypeAmounts);
+
+        if (event.isCancelled())
+            return;
+
+        for (Map.Entry<Villager.ReputationType, Integer> entry : event.getReputationTypeAmounts().entrySet()) {
+            if (Objects.nonNull(entry.getValue())) {
+                this.gossips.add(entity.getUUID(), ReputationType.toNMS(entry.getKey()), entry.getValue());
+            }
+        }
+        // CraftBukit end
     }
 
     @Override
@@ -1027,7 +1079,7 @@
     @Override
     public void startSleeping(BlockPosition blockposition) {
         super.startSleeping(blockposition);
-        this.brain.setMemory(MemoryModuleType.LAST_SLEPT, (Object) this.level.getGameTime());
+        this.brain.setMemory(MemoryModuleType.LAST_SLEPT, this.level.getGameTime()); // CraftBukkit - decompile error
         this.brain.eraseMemory(MemoryModuleType.WALK_TARGET);
         this.brain.eraseMemory(MemoryModuleType.CANT_REACH_WALK_TARGET_SINCE);
     }
@@ -1035,7 +1087,7 @@
     @Override
     public void stopSleeping() {
         super.stopSleeping();
-        this.brain.setMemory(MemoryModuleType.LAST_WOKEN, (Object) this.level.getGameTime());
+        this.brain.setMemory(MemoryModuleType.LAST_WOKEN, this.level.getGameTime()); // CraftBukkit - decompile error
     }
 
     private boolean golemSpawnConditionsMet(long i) {
