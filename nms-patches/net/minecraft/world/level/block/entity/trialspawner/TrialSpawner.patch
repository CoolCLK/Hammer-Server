--- a/net/minecraft/world/level/block/entity/trialspawner/TrialSpawner.java
+++ b/net/minecraft/world/level/block/entity/trialspawner/TrialSpawner.java
@@ -57,16 +57,16 @@
     private static final int MAX_MOB_TRACKING_DISTANCE = 47;
     private static final int MAX_MOB_TRACKING_DISTANCE_SQR = MathHelper.square(47);
     private static final float SPAWNING_AMBIENT_SOUND_CHANCE = 0.02F;
-    private final TrialSpawnerConfig normalConfig;
-    private final TrialSpawnerConfig ominousConfig;
+    public TrialSpawnerConfig normalConfig; // PAIL - private->public, -final
+    public TrialSpawnerConfig ominousConfig; // PAIL - private->public, -final
     private final TrialSpawnerData data;
-    private final int requiredPlayerRange;
-    private final int targetCooldownLength;
+    public int requiredPlayerRange; // PAIL - private->public, -final
+    public int targetCooldownLength; // PAIL - private->public, -final
     public final TrialSpawner.b stateAccessor;
     private PlayerDetector playerDetector;
     private final PlayerDetector.a entitySelector;
     private boolean overridePeacefulAndMobSpawnRule;
-    private boolean isOminous;
+    public boolean isOminous; // PAIL - private->public
 
     public Codec<TrialSpawner> codec() {
         return RecordCodecBuilder.create((instance) -> {
@@ -219,13 +219,13 @@
                                 }
 
                                 entityinsentient.setPersistenceRequired();
-                                Optional optional1 = mobspawnerdata.getEquipment();
+                                Optional<net.minecraft.world.entity.EquipmentTable> optional1 = mobspawnerdata.getEquipment(); // CraftBukkit - decompile error
 
                                 Objects.requireNonNull(entityinsentient);
                                 optional1.ifPresent(entityinsentient::equip);
                             }
 
-                            if (!worldserver.tryAddFreshEntityWithPassengers(entity)) {
+                            if (!worldserver.tryAddFreshEntityWithPassengers(entity, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.TRIAL_SPAWNER)) { // CraftBukkit
                                 return Optional.empty();
                             } else {
                                 TrialSpawner.a trialspawner_a = this.isOminous ? TrialSpawner.a.OMINOUS : TrialSpawner.a.NORMAL;
