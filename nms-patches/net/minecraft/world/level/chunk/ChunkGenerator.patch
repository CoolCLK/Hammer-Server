--- a/net/minecraft/world/level/chunk/ChunkGenerator.java
+++ b/net/minecraft/world/level/chunk/ChunkGenerator.java
@@ -306,7 +306,7 @@
         }
     }
 
-    public void applyBiomeDecoration(GeneratorAccessSeed generatoraccessseed, IChunkAccess ichunkaccess, StructureManager structuremanager) {
+    public void addVanillaDecorations(GeneratorAccessSeed generatoraccessseed, IChunkAccess ichunkaccess, StructureManager structuremanager) { // CraftBukkit
         ChunkCoordIntPair chunkcoordintpair = ichunkaccess.getPos();
 
         if (!SharedConstants.debugVoidTerrain(chunkcoordintpair)) {
@@ -328,7 +328,7 @@
 
                 for (int k = 0; k < j; ++k) {
                     ChunkSection chunksection = achunksection[k];
-                    PalettedContainerRO palettedcontainerro = chunksection.getBiomes();
+                    PalettedContainerRO<Holder<BiomeBase>> palettedcontainerro = chunksection.getBiomes(); // CraftBukkit - decompile error
 
                     Objects.requireNonNull(set);
                     palettedcontainerro.getAll(set::add);
@@ -354,7 +354,7 @@
                             Structure structure = (Structure) iterator.next();
 
                             seededrandom.setFeatureSeed(i, i1, l);
-                            Supplier supplier = () -> {
+                            Supplier<String> supplier = () -> { // CraftBukkit - decompile error
                                 Optional optional = iregistry.getResourceKey(structure).map(Object::toString);
 
                                 Objects.requireNonNull(structure);
@@ -439,6 +439,33 @@
         }
     }
 
+   // CraftBukkit start
+    public void applyBiomeDecoration(GeneratorAccessSeed generatoraccessseed, IChunkAccess ichunkaccess, StructureManager structuremanager) {
+        applyBiomeDecoration(generatoraccessseed, ichunkaccess, structuremanager, true);
+    }
+
+    public void applyBiomeDecoration(GeneratorAccessSeed generatoraccessseed, IChunkAccess ichunkaccess, StructureManager structuremanager, boolean vanilla) {
+        if (vanilla) {
+            addVanillaDecorations(generatoraccessseed, ichunkaccess, structuremanager);
+        }
+
+        org.bukkit.World world = generatoraccessseed.getMinecraftWorld().getWorld();
+        // only call when a populator is present (prevents unnecessary entity conversion)
+        if (!world.getPopulators().isEmpty()) {
+            org.bukkit.craftbukkit.generator.CraftLimitedRegion limitedRegion = new org.bukkit.craftbukkit.generator.CraftLimitedRegion(generatoraccessseed, ichunkaccess.getPos());
+            int x = ichunkaccess.getPos().x;
+            int z = ichunkaccess.getPos().z;
+            for (org.bukkit.generator.BlockPopulator populator : world.getPopulators()) {
+                SeededRandom seededrandom = new SeededRandom(new net.minecraft.world.level.levelgen.LegacyRandomSource(generatoraccessseed.getSeed()));
+                seededrandom.setDecorationSeed(generatoraccessseed.getSeed(), x, z);
+                populator.populate(world, new org.bukkit.craftbukkit.util.RandomSourceWrapper.RandomWrapper(seededrandom), x, z, limitedRegion);
+            }
+            limitedRegion.saveEntities();
+            limitedRegion.breakLink();
+        }
+    }
+    // CraftBukkit end
+
     private static StructureBoundingBox getWritableArea(IChunkAccess ichunkaccess) {
         ChunkCoordIntPair chunkcoordintpair = ichunkaccess.getPos();
         int i = chunkcoordintpair.getMinBlockX();
@@ -496,7 +523,8 @@
         return ((BiomeBase) holder.value()).getMobSettings().getMobs(enumcreaturetype);
     }
 
-    public void createStructures(IRegistryCustom iregistrycustom, ChunkGeneratorStructureState chunkgeneratorstructurestate, StructureManager structuremanager, IChunkAccess ichunkaccess, StructureTemplateManager structuretemplatemanager) {
+    // CraftBukkit - added 'worldServer' parameter for StructureSpawnEvent call
+    public void createStructures(WorldServer worldServer, IRegistryCustom iregistrycustom, ChunkGeneratorStructureState chunkgeneratorstructurestate, StructureManager structuremanager, IChunkAccess ichunkaccess, StructureTemplateManager structuretemplatemanager) {
         ChunkCoordIntPair chunkcoordintpair = ichunkaccess.getPos();
         SectionPosition sectionposition = SectionPosition.bottomOf(ichunkaccess);
         RandomState randomstate = chunkgeneratorstructurestate.randomState();
@@ -517,7 +545,7 @@
 
             if (structureplacement.isStructureChunk(chunkgeneratorstructurestate, chunkcoordintpair.x, chunkcoordintpair.z)) {
                 if (list.size() == 1) {
-                    this.tryGenerateStructure((StructureSet.a) list.get(0), structuremanager, iregistrycustom, randomstate, structuretemplatemanager, chunkgeneratorstructurestate.getLevelSeed(), ichunkaccess, chunkcoordintpair, sectionposition);
+                    this.tryGenerateStructure(worldServer, (StructureSet.a) list.get(0), structuremanager, iregistrycustom, randomstate, structuretemplatemanager, chunkgeneratorstructurestate.getLevelSeed(), ichunkaccess, chunkcoordintpair, sectionposition); // CraftBukkit - added 'worldServer' parameter for StructureSpawnEvent call
                 } else {
                     ArrayList<StructureSet.a> arraylist = new ArrayList(list.size());
 
@@ -551,7 +579,8 @@
 
                             StructureSet.a structureset_a3 = (StructureSet.a) arraylist.get(k);
 
-                            if (this.tryGenerateStructure(structureset_a3, structuremanager, iregistrycustom, randomstate, structuretemplatemanager, chunkgeneratorstructurestate.getLevelSeed(), ichunkaccess, chunkcoordintpair, sectionposition)) {
+                            // CraftBukkit - added 'worldServer' parameter for StructureSpawnEvent call
+                            if (this.tryGenerateStructure(worldServer, structureset_a3, structuremanager, iregistrycustom, randomstate, structuretemplatemanager, chunkgeneratorstructurestate.getLevelSeed(), ichunkaccess, chunkcoordintpair, sectionposition)) {
                                 return;
                             }
 
@@ -566,7 +595,8 @@
         });
     }
 
-    private boolean tryGenerateStructure(StructureSet.a structureset_a, StructureManager structuremanager, IRegistryCustom iregistrycustom, RandomState randomstate, StructureTemplateManager structuretemplatemanager, long i, IChunkAccess ichunkaccess, ChunkCoordIntPair chunkcoordintpair, SectionPosition sectionposition) {
+    // CraftBukkit - added 'worldServer' parameter for StructureSpawnEvent call
+    private boolean tryGenerateStructure(WorldServer worldServer, StructureSet.a structureset_a, StructureManager structuremanager, IRegistryCustom iregistrycustom, RandomState randomstate, StructureTemplateManager structuretemplatemanager, long i, IChunkAccess ichunkaccess, ChunkCoordIntPair chunkcoordintpair, SectionPosition sectionposition) {
         Structure structure = (Structure) structureset_a.structure().value();
         int j = fetchReferences(structuremanager, ichunkaccess, sectionposition, structure);
         HolderSet<BiomeBase> holderset = structure.biomes();
@@ -576,6 +606,14 @@
         StructureStart structurestart = structure.generate(iregistrycustom, this, this.biomeSource, randomstate, structuretemplatemanager, i, chunkcoordintpair, j, ichunkaccess, predicate);
 
         if (structurestart.isValid()) {
+            // CraftBukkit start
+            StructureBoundingBox box = structurestart.getBoundingBox();
+            org.bukkit.event.world.AsyncStructureSpawnEvent event = new org.bukkit.event.world.AsyncStructureSpawnEvent(worldServer.getWorld(), org.bukkit.craftbukkit.generator.strucutre.CraftStructure.minecraftToBukkit(structure, iregistrycustom), new org.bukkit.util.BoundingBox(box.minX(), box.minY(), box.minZ(), box.maxX(), box.maxY(), box.maxZ()), chunkcoordintpair.x, chunkcoordintpair.z);
+            org.bukkit.Bukkit.getPluginManager().callEvent(event);
+            if (event.isCancelled()) {
+                return true;
+            }
+            // CraftBukkit end
             structuremanager.setStartForStructure(sectionposition, structure, structurestart, ichunkaccess);
             return true;
         } else {
