--- a/net/minecraft/world/level/World.java
+++ b/net/minecraft/world/level/World.java
@@ -72,6 +72,26 @@
 import net.minecraft.world.phys.Vec3D;
 import net.minecraft.world.scores.Scoreboard;
 
+// CraftBukkit start
+import net.minecraft.network.protocol.game.ClientboundSetBorderCenterPacket;
+import net.minecraft.network.protocol.game.ClientboundSetBorderLerpSizePacket;
+import net.minecraft.network.protocol.game.ClientboundSetBorderSizePacket;
+import net.minecraft.network.protocol.game.ClientboundSetBorderWarningDelayPacket;
+import net.minecraft.network.protocol.game.ClientboundSetBorderWarningDistancePacket;
+import net.minecraft.server.level.WorldServer;
+import net.minecraft.world.entity.item.EntityItem;
+import net.minecraft.world.level.border.IWorldBorderListener;
+import net.minecraft.world.level.dimension.WorldDimension;
+import org.bukkit.Bukkit;
+import org.bukkit.craftbukkit.CraftServer;
+import org.bukkit.craftbukkit.CraftWorld;
+import org.bukkit.craftbukkit.block.data.CraftBlockData;
+import org.bukkit.craftbukkit.util.BlockCapturer;
+import org.bukkit.craftbukkit.util.CraftSpawnCategory;
+import org.bukkit.entity.SpawnCategory;
+import org.bukkit.event.block.BlockPhysicsEvent;
+// CraftBukkit end
+
 public abstract class World implements GeneratorAccess, AutoCloseable {
 
     public static final Codec<ResourceKey<World>> RESOURCE_KEY_CODEC = ResourceKey.codec(Registries.DIMENSION);
@@ -114,7 +134,40 @@
     private final DamageSources damageSources;
     private long subTickCount;
 
-    protected World(WorldDataMutable worlddatamutable, ResourceKey<World> resourcekey, IRegistryCustom iregistrycustom, Holder<DimensionManager> holder, Supplier<GameProfilerFiller> supplier, boolean flag, boolean flag1, long i, int j) {
+    // CraftBukkit start Added the following
+    private final CraftWorld world;
+    public boolean pvpMode;
+    public boolean keepSpawnInMemory = true;
+    public org.bukkit.generator.ChunkGenerator generator;
+
+    public boolean preventPoiUpdated = false; // CraftBukkit - SPIGOT-5710
+    public BlockCapturer blockCapture = new BlockCapturer(this);
+    public List<EntityItem> captureDrops;
+    public final it.unimi.dsi.fastutil.objects.Object2LongOpenHashMap<SpawnCategory> ticksPerSpawnCategory = new it.unimi.dsi.fastutil.objects.Object2LongOpenHashMap<>();
+    public boolean populating;
+
+    public CraftWorld getWorld() {
+        return this.world;
+    }
+
+    public CraftServer getCraftServer() {
+        return (CraftServer) Bukkit.getServer();
+    }
+
+    public abstract ResourceKey<WorldDimension> getTypeKey();
+
+    protected World(WorldDataMutable worlddatamutable, ResourceKey<World> resourcekey, IRegistryCustom iregistrycustom, Holder<DimensionManager> holder, Supplier<GameProfilerFiller> supplier, boolean flag, boolean flag1, long i, int j, org.bukkit.generator.ChunkGenerator gen, org.bukkit.generator.BiomeProvider biomeProvider, org.bukkit.World.Environment env) {
+        this.generator = gen;
+        this.world = new CraftWorld((WorldServer) this, gen, biomeProvider, env);
+
+        // CraftBukkit Ticks things
+        for (SpawnCategory spawnCategory : SpawnCategory.values()) {
+            if (CraftSpawnCategory.isValidForLimits(spawnCategory)) {
+                this.ticksPerSpawnCategory.put(spawnCategory, (long) this.getCraftServer().getTicksPerSpawns(spawnCategory));
+            }
+        }
+
+        // CraftBukkit end
         this.profiler = supplier;
         this.levelData = worlddatamutable;
         this.dimensionTypeRegistration = holder;
@@ -129,12 +182,12 @@
             this.worldBorder = new WorldBorder() {
                 @Override
                 public double getCenterX() {
-                    return super.getCenterX() / dimensionmanager.coordinateScale();
+                    return super.getCenterX(); // CraftBukkit
                 }
 
                 @Override
                 public double getCenterZ() {
-                    return super.getCenterZ() / dimensionmanager.coordinateScale();
+                    return super.getCenterZ(); // CraftBukkit
                 }
             };
         } else {
@@ -147,6 +200,42 @@
         this.neighborUpdater = new CollectingNeighborUpdater(this, j);
         this.registryAccess = iregistrycustom;
         this.damageSources = new DamageSources(iregistrycustom);
+        // CraftBukkit start
+        getWorldBorder().world = (WorldServer) this;
+        // From PlayerList.setPlayerFileData
+        getWorldBorder().addListener(new IWorldBorderListener() {
+            @Override
+            public void onBorderSizeSet(WorldBorder worldborder, double d0) {
+                getCraftServer().getHandle().broadcastAll(new ClientboundSetBorderSizePacket(worldborder), worldborder.world);
+            }
+
+            @Override
+            public void onBorderSizeLerping(WorldBorder worldborder, double d0, double d1, long i) {
+                getCraftServer().getHandle().broadcastAll(new ClientboundSetBorderLerpSizePacket(worldborder), worldborder.world);
+            }
+
+            @Override
+            public void onBorderCenterSet(WorldBorder worldborder, double d0, double d1) {
+                getCraftServer().getHandle().broadcastAll(new ClientboundSetBorderCenterPacket(worldborder), worldborder.world);
+            }
+
+            @Override
+            public void onBorderSetWarningTime(WorldBorder worldborder, int i) {
+                getCraftServer().getHandle().broadcastAll(new ClientboundSetBorderWarningDelayPacket(worldborder), worldborder.world);
+            }
+
+            @Override
+            public void onBorderSetWarningBlocks(WorldBorder worldborder, int i) {
+                getCraftServer().getHandle().broadcastAll(new ClientboundSetBorderWarningDistancePacket(worldborder), worldborder.world);
+            }
+
+            @Override
+            public void onBorderSetDamagePerBlock(WorldBorder worldborder, double d0) {}
+
+            @Override
+            public void onBorderSetDamageSafeZOne(WorldBorder worldborder, double d0) {}
+        });
+        // CraftBukkit end
     }
 
     @Override
@@ -211,9 +300,17 @@
         } else {
             Chunk chunk = this.getChunkAt(blockposition);
             Block block = iblockdata.getBlock();
-            IBlockData iblockdata1 = chunk.setBlockState(blockposition, iblockdata, (i & 64) != 0);
+
+            boolean captured = this.blockCapture.capture(blockposition, iblockdata, i, j); // CraftBukkit - capture blockstates
+
+            IBlockData iblockdata1 = chunk.setBlockState(blockposition, iblockdata, (i & 64) != 0, (i & 1024) == 0); // CraftBukkit custom NO_PLACE flag
 
             if (iblockdata1 == null) {
+                // CraftBukkit start - remove blockstate if failed (or the same)
+                if (captured) {
+                    this.blockCapture.revertCapture(blockposition);
+                }
+                // CraftBukkit end
                 return false;
             } else {
                 IBlockData iblockdata2 = this.getBlockState(blockposition);
@@ -223,26 +320,41 @@
                         this.setBlocksDirty(blockposition, iblockdata1, iblockdata2);
                     }
 
-                    if ((i & 2) != 0 && (!this.isClientSide || (i & 4) == 0) && (this.isClientSide || chunk.getFullStatus() != null && chunk.getFullStatus().isOrAfter(FullChunkStatus.BLOCK_TICKING))) {
+                    if ((i & 2) != 0 && (!this.isClientSide || (i & 4) == 0) && (this.isClientSide || chunk == null || (chunk.getFullStatus() != null && chunk.getFullStatus().isOrAfter(FullChunkStatus.BLOCK_TICKING)))) { // allow chunk to be null here as chunk.isReady() is false when we send our notification during block placement
                         this.sendBlockUpdated(blockposition, iblockdata1, iblockdata, i);
                     }
 
                     if ((i & 1) != 0) {
                         this.blockUpdated(blockposition, iblockdata1.getBlock());
                         if (!this.isClientSide && iblockdata.hasAnalogOutputSignal()) {
-                            this.updateNeighbourForOutputSignal(blockposition, block);
+                            this.updateNeighbourForOutputSignal(blockposition, iblockdata.getBlock());
                         }
                     }
 
                     if ((i & 16) == 0 && j > 0) {
                         int k = i & -34;
 
-                        iblockdata1.updateIndirectNeighbourShapes(this, blockposition, k, j - 1);
+                        // CraftBukkit start
+                        iblockdata1.updateIndirectNeighbourShapes(this, blockposition, k, j - 1); // Don't call an event for the old block to limit event spam
+                        CraftWorld world = ((WorldServer) this).getWorld();
+                        if (world != null) {
+                            BlockPhysicsEvent event = new BlockPhysicsEvent(world.getBlockAt(blockposition.getX(), blockposition.getY(), blockposition.getZ()), CraftBlockData.fromData(iblockdata));
+                            this.getCraftServer().getPluginManager().callEvent(event);
+
+                            if (event.isCancelled()) {
+                                return true;
+                            }
+                        }
+                        // CraftBukkit end
                         iblockdata.updateNeighbourShapes(this, blockposition, k, j - 1);
                         iblockdata.updateIndirectNeighbourShapes(this, blockposition, k, j - 1);
                     }
 
-                    this.onBlockStateChange(blockposition, iblockdata1, iblockdata2);
+                    // CraftBukkit start - SPIGOT-5710
+                    if (!preventPoiUpdated) {
+                        this.onBlockStateChange(blockposition, iblockdata1, iblockdata2);
+                    }
+                    // CraftBukkit end
                 }
 
                 return true;
@@ -663,7 +775,7 @@
 
                 for (int k = 0; k < j; ++k) {
                     EntityComplexPart entitycomplexpart = aentitycomplexpart[k];
-                    T t0 = (Entity) entitytypetest.tryCast(entitycomplexpart);
+                    T t0 = entitytypetest.tryCast(entitycomplexpart); // CraftBukkit - decompile error
 
                     if (t0 != null && predicate.test(t0)) {
                         list.add(t0);
