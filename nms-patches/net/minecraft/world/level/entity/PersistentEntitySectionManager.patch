--- a/net/minecraft/world/level/entity/PersistentEntitySectionManager.java
+++ b/net/minecraft/world/level/entity/PersistentEntitySectionManager.java
@@ -32,6 +32,11 @@
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
+// CraftBukkit start
+import net.minecraft.world.level.chunk.storage.EntityStorage;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+// CraftBukkit end
+
 public class PersistentEntitySectionManager<T extends EntityAccess> implements AutoCloseable {
 
     static final Logger LOGGER = LogManager.getLogger();
@@ -46,6 +51,8 @@
     private final LongSet chunksToUnload = new LongOpenHashSet();
     private final Queue<ChunkEntities<T>> loadingInbox = Queues.newConcurrentLinkedQueue();
 
+    public final java.util.Map<ChunkCoordIntPair, List<Consumer<List<org.bukkit.entity.Entity>>>> bukkitCallbacks = new java.util.HashMap<>(); // CraftBukkit - callbacks
+
     public PersistentEntitySectionManager(Class<T> oclass, LevelCallback<T> levelcallback, EntityPersistentStorage<T> entitypersistentstorage) {
         this.sectionStorage = new EntitySectionStorage<>(oclass, this.chunkVisibility);
         this.chunkVisibility.defaultReturnValue(Visibility.HIDDEN);
@@ -55,6 +62,19 @@
         this.entityGetter = new LevelEntityGetterAdapter<>(this.visibleEntityStorage, this.sectionStorage);
     }
 
+    // CraftBukkit start - add methode to receive chunk visibility and schedule entity loading
+    public Visibility getChunkVisibility(ChunkCoordIntPair chunkCoordIntPair) {
+        return this.chunkVisibility.get(chunkCoordIntPair.pair());
+    }
+
+    public void scheduleEntityLoading(int x, int z, Consumer<List<org.bukkit.entity.Entity>> consumer) {
+        if (consumer != null) {
+            bukkitCallbacks.computeIfAbsent(new ChunkCoordIntPair(x, z), coord -> new java.util.LinkedList<>()).add(consumer);
+        }
+        b(ChunkCoordIntPair.pair(x, z));
+    }
+    // CraftBukkit end
+
     void a(long i, EntitySection<T> entitysection) {
         if (entitysection.a()) {
             this.sectionStorage.e(i);
@@ -82,7 +102,7 @@
             long i = SectionPosition.c(t0.getChunkCoordinates());
             EntitySection<T> entitysection = this.sectionStorage.c(i);
 
-            entitysection.a((Object) t0);
+            entitysection.a(t0); // CraftBukkit - decompile error
             t0.a(new PersistentEntitySectionManager.a(t0, i, entitysection));
             if (!flag) {
                 this.callbacks.f(t0);
@@ -207,6 +227,7 @@
 
             if (list.isEmpty()) {
                 if (persistententitysectionmanager_b == PersistentEntitySectionManager.b.LOADED) {
+                    CraftEventFactory.callEntitiesUnloadEvent(((EntityStorage) permanentStorage).level, new ChunkCoordIntPair(i), ImmutableList.of()); // CraftBukkit
                     this.permanentStorage.a(new ChunkEntities<>(new ChunkCoordIntPair(i), ImmutableList.of()));
                 }
 
@@ -215,6 +236,7 @@
                 this.c(i);
                 return false;
             } else {
+                CraftEventFactory.callEntitiesUnloadEvent(((EntityStorage) permanentStorage).level, new ChunkCoordIntPair(i), list.stream().map(entity -> (Entity) entity).collect(Collectors.toList())); // CraftBukkit
                 this.permanentStorage.a(new ChunkEntities<>(new ChunkCoordIntPair(i), list));
                 list.forEach(consumer);
                 return true;
@@ -254,19 +276,28 @@
     }
 
     private void f() {
-        this.chunksToUnload.removeIf((i) -> {
+        this.chunksToUnload.removeIf((java.util.function.LongPredicate) (i) -> { // CraftBukkit - decompile error
             return this.chunkVisibility.get(i) != Visibility.HIDDEN ? true : this.d(i);
         });
     }
 
     private void g() {
-        ChunkEntities chunkentities;
+        ChunkEntities<T> chunkentities; // CraftBukkit - decompile error
 
         while ((chunkentities = (ChunkEntities) this.loadingInbox.poll()) != null) {
             chunkentities.b().forEach((entityaccess) -> {
                 this.a(entityaccess, true);
             });
             this.chunkLoadStatuses.put(chunkentities.a().pair(), PersistentEntitySectionManager.b.LOADED);
+            // CraftBukkit start - call entity load event and execute callbacks
+            List<Entity> entities = sectionStorage.b(chunkentities.a().pair()).flatMap(EntitySection::b).map(entiy -> (Entity) entiy).collect(Collectors.toList());
+            CraftEventFactory.callEntitiesLoadEvent(((EntityStorage) permanentStorage).level, chunkentities.a(), entities);
+
+            List<Consumer<List<org.bukkit.entity.Entity>>> callbacks = bukkitCallbacks.remove(chunkentities.a());
+            if (callbacks != null) {
+                callbacks.forEach(callback -> callback.accept(entities.stream().map(Entity::getBukkitEntity).collect(Collectors.toList())));
+            }
+            // CraftBukkit end
         }
 
     }
@@ -292,7 +323,7 @@
     }
 
     public void b() {
-        this.h().forEach((i) -> {
+        this.h().forEach((java.util.function.LongConsumer) (i) -> { // CraftBukkit - decompile error
             boolean flag = this.chunkVisibility.get(i) == Visibility.HIDDEN;
 
             if (flag) {
@@ -311,7 +342,7 @@
         while (!longset.isEmpty()) {
             this.permanentStorage.a();
             this.g();
-            longset.removeIf((i) -> {
+            longset.removeIf((java.util.function.LongPredicate) (i) -> { // CraftBukkit - decompile error
                 boolean flag = this.chunkVisibility.get(i) == Visibility.HIDDEN;
 
                 return flag ? this.d(i) : this.a(i, (entityaccess) -> {
@@ -349,7 +380,7 @@
     public void a(Writer writer) throws IOException {
         CSVWriter csvwriter = CSVWriter.a().a("x").a("y").a("z").a("visibility").a("load_status").a("entity_count").a(writer);
 
-        this.sectionStorage.a().forEach((i) -> {
+        this.sectionStorage.a().forEach((java.util.function.LongConsumer) (i) -> { // CraftBukkit - decompile error
             PersistentEntitySectionManager.b persistententitysectionmanager_b = (PersistentEntitySectionManager.b) this.chunkLoadStatuses.get(i);
 
             this.sectionStorage.a(i).forEach((j) -> {
@@ -388,7 +419,7 @@
         private EntitySection<T> currentSection;
 
         a(EntityAccess entityaccess, long i, EntitySection entitysection) {
-            this.entity = entityaccess;
+            this.entity = (T) entityaccess; // CraftBukkit - decompile error
             this.currentSectionKey = i;
             this.currentSection = entitysection;
         }
@@ -408,7 +439,7 @@
                 PersistentEntitySectionManager.this.a(this.currentSectionKey, this.currentSection);
                 EntitySection<T> entitysection = PersistentEntitySectionManager.this.sectionStorage.c(i);
 
-                entitysection.a((Object) this.entity);
+                entitysection.a(this.entity); // CraftBukkit - decompile error
                 this.currentSection = entitysection;
                 this.currentSectionKey = i;
                 this.a(visibility, entitysection.c());
