--- a/net/minecraft/server/commands/data/CommandData.java
+++ b/net/minecraft/server/commands/data/CommandData.java
@@ -32,6 +32,17 @@
 import net.minecraft.network.chat.IChatBaseComponent;
 import net.minecraft.util.MathHelper;
 
+// CraftBukkit start
+import java.util.Optional;
+import net.minecraft.nbt.NBTTagList;
+import net.minecraft.world.entity.Entity;
+import net.minecraft.world.entity.EntityLiving;
+import net.minecraft.world.item.ItemStack;
+import org.bukkit.Bukkit;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.craftbukkit.inventory.CraftItemStack;
+// CraftBukkit end
+
 public class CommandData {
 
     private static final SimpleCommandExceptionType ERROR_MERGE_UNCHANGED = new SimpleCommandExceptionType(IChatBaseComponent.translatable("commands.data.merge.failed"));
@@ -51,12 +62,12 @@
     private static final Dynamic2CommandExceptionType ERROR_INVALID_SUBSTRING = new Dynamic2CommandExceptionType((object, object1) -> {
         return IChatBaseComponent.translatableEscape("commands.data.modify.invalid_substring", object, object1);
     });
-    public static final List<Function<String, CommandData.c>> ALL_PROVIDERS = ImmutableList.of(CommandDataAccessorEntity.PROVIDER, CommandDataAccessorTile.PROVIDER, CommandDataStorage.PROVIDER);
-    public static final List<CommandData.c> TARGET_PROVIDERS = (List) CommandData.ALL_PROVIDERS.stream().map((function) -> {
-        return (CommandData.c) function.apply("target");
+    public static final List<Function<String, c>> ALL_PROVIDERS = ImmutableList.of(CommandDataAccessorEntity.PROVIDER, CommandDataAccessorTile.PROVIDER, CommandDataStorage.PROVIDER);
+    public static final List<c> TARGET_PROVIDERS = (List) CommandData.ALL_PROVIDERS.stream().map((function) -> {
+        return (c) function.apply("target");
     }).collect(ImmutableList.toImmutableList());
-    public static final List<CommandData.c> SOURCE_PROVIDERS = (List) CommandData.ALL_PROVIDERS.stream().map((function) -> {
-        return (CommandData.c) function.apply("source");
+    public static final List<c> SOURCE_PROVIDERS = (List) CommandData.ALL_PROVIDERS.stream().map((function) -> {
+        return (c) function.apply("source");
     }).collect(ImmutableList.toImmutableList());
 
     public CommandData() {}
@@ -68,7 +79,7 @@
         Iterator iterator = CommandData.TARGET_PROVIDERS.iterator();
 
         while (iterator.hasNext()) {
-            CommandData.c commanddata_c = (CommandData.c) iterator.next();
+            c commanddata_c = (c) iterator.next();
 
             ((LiteralArgumentBuilder) ((LiteralArgumentBuilder) ((LiteralArgumentBuilder) literalargumentbuilder.then(commanddata_c.wrap(net.minecraft.commands.CommandDispatcher.literal("merge"), (argumentbuilder) -> {
                 return argumentbuilder.then(net.minecraft.commands.CommandDispatcher.argument("nbt", ArgumentNBTTag.compoundTag()).executes((commandcontext) -> {
@@ -149,7 +160,7 @@
         }
     }
 
-    private static List<NBTBase> stringifyTagList(List<NBTBase> list, CommandData.d commanddata_d) throws CommandSyntaxException {
+    private static List<NBTBase> stringifyTagList(List<NBTBase> list, d commanddata_d) throws CommandSyntaxException {
         List<NBTBase> list1 = new ArrayList(list.size());
         Iterator iterator = list.iterator();
 
@@ -163,19 +174,19 @@
         return list1;
     }
 
-    private static ArgumentBuilder<CommandListenerWrapper, ?> decorateModification(BiConsumer<ArgumentBuilder<CommandListenerWrapper, ?>, CommandData.b> biconsumer) {
+    private static ArgumentBuilder<CommandListenerWrapper, ?> decorateModification(BiConsumer<ArgumentBuilder<CommandListenerWrapper, ?>, b> biconsumer) {
         LiteralArgumentBuilder<CommandListenerWrapper> literalargumentbuilder = net.minecraft.commands.CommandDispatcher.literal("modify");
         Iterator iterator = CommandData.TARGET_PROVIDERS.iterator();
 
         while (iterator.hasNext()) {
-            CommandData.c commanddata_c = (CommandData.c) iterator.next();
+            c commanddata_c = (c) iterator.next();
 
             commanddata_c.wrap(literalargumentbuilder, (argumentbuilder) -> {
                 ArgumentBuilder<CommandListenerWrapper, ?> argumentbuilder1 = net.minecraft.commands.CommandDispatcher.argument("targetPath", ArgumentNBTKey.nbtPath());
                 Iterator iterator1 = CommandData.SOURCE_PROVIDERS.iterator();
 
                 while (iterator1.hasNext()) {
-                    CommandData.c commanddata_c1 = (CommandData.c) iterator1.next();
+                    c commanddata_c1 = (c) iterator1.next();
 
                     biconsumer.accept(argumentbuilder1, (commanddata_a) -> {
                         return commanddata_c1.wrap(net.minecraft.commands.CommandDispatcher.literal("from"), (argumentbuilder2) -> {
@@ -249,29 +260,47 @@
         return i >= 0 ? i : j + i;
     }
 
-    private static List<NBTBase> getSingletonSource(CommandContext<CommandListenerWrapper> commandcontext, CommandData.c commanddata_c) throws CommandSyntaxException {
+    private static List<NBTBase> getSingletonSource(CommandContext<CommandListenerWrapper> commandcontext, c commanddata_c) throws CommandSyntaxException {
         CommandDataAccessor commanddataaccessor = commanddata_c.access(commandcontext);
 
         return Collections.singletonList(commanddataaccessor.getData());
     }
 
-    private static List<NBTBase> resolveSourcePath(CommandContext<CommandListenerWrapper> commandcontext, CommandData.c commanddata_c) throws CommandSyntaxException {
+    private static List<NBTBase> resolveSourcePath(CommandContext<CommandListenerWrapper> commandcontext, c commanddata_c) throws CommandSyntaxException {
         CommandDataAccessor commanddataaccessor = commanddata_c.access(commandcontext);
         ArgumentNBTKey.g argumentnbtkey_g = ArgumentNBTKey.getPath(commandcontext, "sourcePath");
 
         return argumentnbtkey_g.get(commanddataaccessor.getData());
     }
 
-    private static int manipulateData(CommandContext<CommandListenerWrapper> commandcontext, CommandData.c commanddata_c, CommandData.a commanddata_a, List<NBTBase> list) throws CommandSyntaxException {
+    private static int manipulateData(CommandContext<CommandListenerWrapper> commandcontext, c commanddata_c, a commanddata_a, List<NBTBase> list) throws CommandSyntaxException {
         CommandDataAccessor commanddataaccessor = commanddata_c.access(commandcontext);
         ArgumentNBTKey.g argumentnbtkey_g = ArgumentNBTKey.getPath(commandcontext, "targetPath");
         NBTTagCompound nbttagcompound = commanddataaccessor.getData();
+        Optional<NBTTagList> armorCopy = nbttagcompound.contains("ArmorItems", 9) ? Optional.of(nbttagcompound.getList("ArmorItems", 10).copy()) : Optional.empty(); // CraftBukkit
         int i = commanddata_a.modify(commandcontext, nbttagcompound, argumentnbtkey_g, list);
 
         if (i == 0) {
             throw CommandData.ERROR_MERGE_UNCHANGED.create();
         } else {
             commanddataaccessor.setData(nbttagcompound);
+            // CraftBukkit start
+            if (commanddataaccessor instanceof CommandDataAccessorEntity commandDataAccessorEntity) {
+                Entity entity = commandDataAccessorEntity.entity;
+                if (entity instanceof EntityLiving entityLiving && armorCopy.isPresent() && nbttagcompound.contains("ArmorItems", 9)) {
+                    NBTTagList unmodifiedArmorList = armorCopy.get();
+                    NBTTagList modifiedArmorList = nbttagcompound.getList("ArmorItems", 10);
+
+                    for (int j = 0; j < unmodifiedArmorList.size(); j++) {
+                        ItemStack unmodifiedItem = ItemStack.parseOptional(entityLiving.registryAccess(), unmodifiedArmorList.getCompound(j));
+                        ItemStack modifiedItem = ItemStack.parseOptional(entityLiving.registryAccess(), modifiedArmorList.getCompound(j));
+                        if (!CraftItemStack.asBukkitCopy(unmodifiedItem).equals(CraftItemStack.asBukkitCopy(modifiedItem))) {
+                            CraftEventFactory.callEntityEquipArmorEvent((EntityLiving) entity, unmodifiedItem, modifiedItem, 8 - j);
+                        }
+                    }
+                }
+            }
+            // CraftBukkit end
             ((CommandListenerWrapper) commandcontext.getSource()).sendSuccess(() -> {
                 return commanddataaccessor.getModifiedSuccess();
             }, true);
@@ -396,6 +425,6 @@
     @FunctionalInterface
     private interface b {
 
-        ArgumentBuilder<CommandListenerWrapper, ?> create(CommandData.a commanddata_a);
+        ArgumentBuilder<CommandListenerWrapper, ?> create(a commanddata_a);
     }
 }
